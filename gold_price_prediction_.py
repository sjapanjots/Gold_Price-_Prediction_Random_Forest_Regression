# -*- coding: utf-8 -*-
"""Gold Price Prediction .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xCJguFlmpcVxmk3xy6nJDwUvTFvraj7a

# Gold Price Prediction
"""

from google.colab import drive
drive.mount('/content/drive')

path = '/content/drive/MyDrive/mlproject2/gld_price_data.csv'

# importing the dependencies
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

# data preprocessing
gold_data = pd.read_csv(path)

# print first five rows in  dataframe
gold_data.head()

gold_data.shape

#print the last 5 rows of the dataframe
gold_data.tail()

# number of rows and columns
gold_data.shape

# getting some basic information about the data
gold_data.info()

# checking the numner of missing values
gold_data.isnull().sum()

# getting the statistical measure of the data
gold_data.describe()

"""correlation:

1. Positive Correlation

2. Negative Correlation
"""

correlation = gold_data.corr()

# constructing a heatmap to understand the correlation
plt.figure(figsize = (8,8))
sns.heatmap(correlation , cbar=True , square=True, fmt='.1f' , annot=True,annot_kws={'size':8}, cmap='Blues')

# correlation vlaues of GLD
print(correlation['GLD'])

# chekc the distribution of the GLD price
sns.distplot(gold_data['GLD'],color='green')

sns.displot(gold_data['GLD'], color='red')

"""splitting the features and target"""

X = gold_data.drop(['Date','GLD'], axis=1)
Y = gold_data['GLD']

print(X)

print(Y)

"""splitting into Training data and Test data"""

X_train, X_test, Y_train , Y_test = train_test_split(X,Y, test_size= 0.2, random_state= 2)

"""Model Trainig:

Random Forest Regression
"""

regressor = RandomForestRegressor(n_estimators=100)

#training the model
regressor.fit(X_train, Y_train)

"""Model Evaluation

"""

# prediction on Test Data
test_data_prediction = regressor.predict(X_test)

print(test_data_prediction)

# R squared error
error_score = metrics.r2_score(Y_test , test_data_prediction)
print('R squared error', error_score)

"""Compare the actual values and predicted values in a plot"""

Y_test = list(Y_test)

plt.plot(Y_test , color='blue' , label = 'Actual Value')
plt.plot(test_data_prediction , color='green' , label='Predicted Value ')
plt.title('Actual price vs Predicted Price ')
plt.xlabel("Number of values ")
plt.ylabel('GLD price ')
plt.legend()
plt.show()

